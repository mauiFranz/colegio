# Generated by Django 4.0.6 on 2022-08-01 17:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dv_user', models.CharField(max_length=1)),
                ('snombre_user', models.CharField(blank=True, max_length=25, null=True)),
                ('apmat_user', models.CharField(max_length=25)),
                ('celular_user', models.IntegerField(unique=True)),
                ('direccion_user', models.CharField(max_length=100)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='uploads/fotos/', validators=[django.core.validators.FileExtensionValidator(['png'])])),
                ('fecha_nac_user', models.DateField(blank=True, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_alumno', models.BooleanField(default=False)),
                ('is_profesor', models.BooleanField(default=False)),
                ('is_administrativo', models.BooleanField(default=False)),
                ('is_apoderado', models.BooleanField(default=False)),
                ('is_inspector', models.BooleanField(default=False)),
                ('is_auditor', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'auth_user',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('codigo_region', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('nombre_region', models.CharField(max_length=75)),
                ('orden_region', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'Regi√≥n',
                'verbose_name_plural': 'Regiones',
                'ordering': ['orden_region'],
            },
        ),
        migrations.CreateModel(
            name='UserProfesor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_userprof', models.BooleanField(default=True)),
                ('user_userprof', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Profesor',
                'verbose_name_plural': 'Usuarios Tipo Profesor',
                'ordering': ['user_userprof'],
            },
        ),
        migrations.CreateModel(
            name='UserInspector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_userinspector', models.BooleanField(default=True)),
                ('user_userinspector', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Inspector',
                'verbose_name_plural': 'Usuarios Tipo Inspector',
                'ordering': ['user_userinspector'],
            },
        ),
        migrations.CreateModel(
            name='UserAuditor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_useradmin', models.BooleanField(default=True)),
                ('user_userauditor', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Auditor',
                'verbose_name_plural': 'Usuarios Tipo Auditor',
                'ordering': ['user_userauditor'],
            },
        ),
        migrations.CreateModel(
            name='UserApoderado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_userapoderado', models.BooleanField(default=True)),
                ('user_userapoderado', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Apoderado',
                'verbose_name_plural': 'Usuarios Tipo Apoderado',
                'ordering': ['user_userapoderado'],
            },
        ),
        migrations.CreateModel(
            name='UserAlumno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_useralumno', models.BooleanField(default=True)),
                ('user_useralumno', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Alumno',
                'verbose_name_plural': 'Usuarios Tipo Alumno',
                'ordering': ['user_useralumno'],
            },
        ),
        migrations.CreateModel(
            name='UserAdministrativo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_useradministrativo', models.BooleanField(default=True)),
                ('user_useradministrativo', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Administrativo',
                'verbose_name_plural': 'Usuarios Tipo Administrativo',
                'ordering': ['user_useradministrativo'],
            },
        ),
        migrations.CreateModel(
            name='UserAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_useradmin', models.BooleanField(default=True)),
                ('user_useradmin', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario Tipo Administrador',
                'verbose_name_plural': 'Usuarios Tipo Administrador',
                'ordering': ['user_useradmin'],
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('codigo_provincia', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('nombre_provincia', models.CharField(max_length=50)),
                ('region_provincia', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usuarios.region')),
            ],
            options={
                'verbose_name': 'Provincia',
                'verbose_name_plural': 'Provincias',
                'ordering': ['nombre_provincia'],
            },
        ),
        migrations.CreateModel(
            name='Comuna',
            fields=[
                ('codigo_comuna', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('nombre_comuna', models.CharField(max_length=50)),
                ('provincia_comuna', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usuarios.provincia')),
            ],
            options={
                'verbose_name': 'Comuna',
                'verbose_name_plural': 'Comunas',
                'ordering': ['nombre_comuna'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='comuna_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usuarios.comuna'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
